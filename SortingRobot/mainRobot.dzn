import sortingSystem.dzn;
import takingSystem.dzn;
import returnSystem.dzn;
import IRobotCommunication.dzn;

interface IRobot {
	in void start();
	in void stop();
	
	enum State {Off, Idle, Running};
	
	behaviour {
		State state = State.Off;
		
		[state.Off] {
			on start: {state = State.Idle;}
			on stop: {}
		}
		[state.Idle] {
			on start: {}
			on stop: {state = State.Off;}
		}
		[state.Running] {
			on start: {}
			on stop: {state = State.Off;}
		}
	}
}

component Robot {
	provides IRobot robot;
	
	system {
		RaspberryPi controller;
		CommunicationSystem communication;
		SortingSystem sorter;
		TakingSystem taker;
		ReturningSystem returner;
		
		robot <=> controller.controller;
		controller.communication <=> communication.communication;
		controller.sorting <=> sorter.sortingSystem;
		controller.taker <=> taker.takingSystem;
		controller.returner <=> returner.returningSystem;
	}
}

component RaspberryPi {
	provides IRobot controller;
	
	requires IRobotCommunication communication;
	requires ISorter sorting;
	requires ITaking taker;
	requires IReturner returner;
	
	behaviour {
		IRobot.State state = IRobot.State.Off;
		
		[state.Off] {
			on controller.start(): {
				state = IRobot.State.Idle;
			}
			on controller.stop(): {}
		}
		[state.Idle] {
			
			on controller.start(): {}
		}
		[state.Running] {
			
		}
	}
}