import sortingSystem.dzn;
import takingSystem.dzn;
import IRobotCommunication.dzn;

interface IRobot {
	in void start();
	in void stop();
	
	enum State {On, Off};
	
	behaviour {
		State state = State.Off;
		
		[state.Off] {
			on start: {state = State.On;}
			on stop: {}
		}
		[state.On] {
			on start: {}
			on stop: {state = State.Off;}
		}
	}
}

component Robot {
	provides IRobot robot;
	
	system {
		RaspberryPi controller;
		CommunicationSystem communication;
		SortingSystem sorter;
		TakingSystem taker;
		
		robot <=> controller.controller;
		controller.communication <=> communication.communication;
		controller.sorting <=> sorter.sortingSystem;
		controller.taker <=> taker.takingSystem;
	}
}

component RaspberryPi {
	provides IRobot controller;
	
	requires IRobotCommunication communication;
	requires ISorter sorting;
	requires ITaking taker;
}