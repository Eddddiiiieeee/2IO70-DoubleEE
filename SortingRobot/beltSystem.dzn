import interfaces.dzn;
import ITimer.dzn;

/**
 * @throws error() when the ticker does not get a signal after 10 seconds (10000 ms)
 */
interface IBelt {
	in void start();
	in void stop();
	out void error();
	
	behaviour {
		enum State {Idle, Running};
		State state = State.Idle;
		
		[state.Idle] {
			on start: state = State.Running;
			on stop: illegal;
		}
		
		[state.Running] {
			on start: illegal;
			on stop: state = State.Idle;
			on optional: error;
		}
	}
}

component Belt {
	provides IBelt belt;
	
	system {
		BeltController controller;
		Motor motor;
		Button button;
		Timer timer;
		
		belt <=> controller.controller;
		controller.motor <=> motor.motor;
		controller.sensor <=> button.sensor;
		controller.timer <=> timer.iTimer;
	}
}

component BeltController {
	provides IBelt controller;
	
	requires IMotor motor;
	requires IBasicSensor sensor;
	requires ITimer timer;
	
	behaviour {
		enum State {Idle, Running, Error};
		ITimer.unsigned_integer interval = $10000$;
		State state = State.Idle;
		
		[state.Idle] {
			on controller.start(): {
				motor.start();
				timer.start(interval);
				state = State.Running;
			}
			// TODO: Consider if illegal statement:
			on sensor.triggered(): {} // Illegal? since motor does not stop?
			on controller.stop(): illegal;
		}
		
		[state.Running] {
			on controller.stop(): {
				motor.stop();
				timer.cancel();
				state = State.Idle;
			}
			
			on sensor.triggered(): {
				timer.cancel();
				timer.start(interval);
			}
			
			on timer.timeout(): {
				state = State.Error;
				controller.error();
				motor.stop();
			}
			
			on controller.start(): illegal;
		}
		
		[state.Error] {
			on controller.stop(): {
				//motor.stop();
				state = State.Idle;
			}
		}
	}
}

component Motor {
	provides IMotor motor;
	
	behaviour {
		enum State {Idle, Running};
		State state = State.Idle;
		
		[state.Idle] {
			on motor.start(): state = State.Running;
		}
		
		[state.Running] {
			on motor.stop(): state = State.Idle;
		}
	}
}