import interfaces.dzn;
import ITimer.dzn;

interface IBlocker {
	in void start();
	in void stop();
	out void error();
	
	behaviour {
		enum State {Retracted, Extended};
		State state = State.Retracted;
		
		[state.Retracted] {
			on start: state = State.Extended;
			on stop: illegal;
		}
		
		[state.Extended] {
			on start: illegal;
			on stop: state = State.Retracted;
			on optional: error;
		}
	}
}

component Blocker {
	provides IBlocker blocker;
	
	system {
		BlockerController controller;
		Piston piston;
		Sensor sensor;
		Timer timer;
		
		blocker <=> controller.controller;
		controller.piston <=> piston.piston;
		controller.sensor <=> sensor.sensor;
		controller.timer <=> timer.iTimer;
	}
}

component BlockerController {
	provides IBlocker controller;
	
	requires IPiston piston;
	requires IBasicSensor sensor;
	requires ITimer timer;
	
	behaviour {
		enum State {Retracted, Extended, Error};
		State state = State.Retracted;
		
		[state.Retracted] {
			on controller.start(): {
				piston.extend();
				timer.start($10000$);
				state = State.Extended;
			}
		}
		
		[state.Extended] {
			on controller.stop(): {
				piston.retract();
				timer.cancel();
				state = State.Retracted;
			}
			
			on timer.timeout(): {
				state = State.Error;
				controller.error();
				piston.retract();
			}
		}
		
		[state.Error] {
			on controller.stop(): {
				//piston.retract();
				state = State.Retracted;
			}
		}
	}
}

component Piston {
	provides IPiston piston;
}

component Sensor {
	provides IBasicSensor sensor;
}