import interfaces.dzn;
import ITimer.dzn;

/**
 * @pram extendTime		Time in (ms) for the piston to be extended
 * @pram timeoutTime	Time in (ms) for how long before we declare ERROR if the piston does not extend
 * @throws error() if timeoutTime has passed and the piston did not extend (sensor reading)
 */
interface IBlocker {
	extern integer $int$;
	enum BlockerErrors {none , pistonExtended, pistonRetracted};
	in void trigger(integer extendTime, integer timeoutTime);	
	in void stop();
	out void error();
	in BlockerErrors getErrorState();
	
	behaviour {
		enum State {Retracted, Extended, Error};
		State state = State.Retracted;
		BlockerErrors errorState = BlockerErrors.none;
		
		[state.Retracted] {
			on trigger: state = State.Extended;
			on stop: {}
			on getErrorState: {reply(BlockerErrors.none);}
			on optional: {error; state = State.Error; errorState = BlockerErrors.pistonExtended;}
		}
		
		[state.Extended] {
			on trigger: {}
			on stop: state = State.Retracted;
			on getErrorState: {reply(BlockerErrors.none);}
			on optional: {error; state = State.Error; errorState = BlockerErrors.pistonRetracted;}
			on optional: {error; state = State.Error; errorState = BlockerErrors.pistonExtended;}
		}
		[state.Error] {
			on trigger: {}
			on stop: {state = State.Retracted; errorState = BlockerErrors.none;}
			on getErrorState: {reply(errorState);}
		}
	}
}

component Blocker {
	provides IBlocker blocker;
	
	system {
		BlockerController controller;
		Piston piston;
		Button button;
		Timer pistonTimer;
		Timer timeoutTimer;
		
		blocker <=> controller.controller;
		controller.piston <=> piston.piston;
		controller.sensor <=> button.sensor;
		controller.pistonTimer <=> pistonTimer.iTimer;
		controller.timeout <=> timeoutTimer.iTimer;
	}
}

component BlockerController {
	provides IBlocker controller;
	
	requires IPiston piston;
	requires IBasicSensor sensor;
	requires ITimer pistonTimer;
	requires ITimer timeout;
	
	behaviour {
		//ITimer.integer extendTime = $2500$;
		//ITimer.integer timeoutTime = $10000$;
		bool pistonExtended = false;
		enum State {Retracted, Extended, Error};
		IBlocker.BlockerErrors errorState = IBlocker.BlockerErrors.none;
		State state = State.Retracted;
		
		[state.Retracted] {
			on controller.trigger(extendTime, timeoutTime): {		
				sensor.deactivate();
				sensor.activate();		
				pistonTimer.start(extendTime); // Time piston is extended
				timeout.start(timeoutTime); // Timer if sensor does not detect piston is up
				piston.extend();
				//pistonExtended = !pistonExtended;
				state = State.Extended;
			}
			
			on controller.stop(), timeout.timeout(): {}
			
			on sensor.triggered(): { // Piston stuck on.
				controller.error();
				pistonTimer.cancel();
				timeout.cancel();
				sensor.deactivate();
				state = State.Error;
				errorState = IBlocker.BlockerErrors.pistonExtended;
			}
			
			on controller.getErrorState(): {reply(errorState);}
		}
		
		[state.Extended] {
			on controller.trigger(extendTime, timeoutTime): {
				[pistonExtended] {
					pistonTimer.cancel();
					//timeout.cancel();
					pistonTimer.start(extendTime);
				}
				[!pistonExtended] { // If piston has not reached the sensor, extend timer, give it another chance to trigger it
					pistonTimer.cancel();
					timeout.cancel();
					sensor.deactivate();
					
					pistonTimer.start(extendTime);
					timeout.start(timeoutTime);
					
					sensor.activate();
					//piston.extend();
				}
			}
			
			on controller.stop(): {
				piston.retract();
				pistonExtended = false;
				pistonTimer.cancel();
				timeout.cancel();
				sensor.deactivate();
				state = State.Retracted;
				sensor.activate();
			}
			
			on pistonTimer.timeout(): {
				[pistonExtended] {
					piston.retract();
					pistonExtended = !pistonExtended;
					state = State.Retracted;
					sensor.activate();
				} 
				[!pistonExtended] {
					controller.error();
					timeout.cancel();
					pistonTimer.cancel();
					sensor.deactivate();
					piston.retract();
					state = State.Error;
					errorState = IBlocker.BlockerErrors.pistonRetracted;
				}
			}
			
			on sensor.triggered(): {
				pistonExtended = true;
				timeout.cancel();
			}
			
			on timeout.timeout(): {
				controller.error();
				pistonTimer.cancel();
				sensor.deactivate();
				piston.retract();
				state = State.Error;
				errorState = IBlocker.BlockerErrors.pistonRetracted;
			}
			
			on controller.getErrorState(): {reply(errorState);}
		}
		
		[state.Error] {
			on controller.stop(): {
				[!pistonExtended] {
					state = State.Retracted;
					sensor.activate();
					errorState = IBlocker.BlockerErrors.none;
				}
				[pistonExtended] {
					piston.retract();
					pistonExtended = !pistonExtended;
					state = State.Retracted;
					sensor.activate();
					errorState = IBlocker.BlockerErrors.none;
				}
			}
			on controller.trigger(extendTime, timeoutTime), sensor.triggered(): {}
			on controller.getErrorState(): {reply(errorState);}
		}
	}
}


component Piston {
	provides IPiston piston;
	
	behaviour {
		IPiston.State state = IPiston.State.Retracted;
		
		[state.Retracted] {
			on piston.extend(): {state = IPiston.State.Extended;}
			on piston.retract(): illegal;
		}
		[state.Extended] {
			on piston.extend(): illegal;
			on piston.retract(): {state = IPiston.State.Retracted;}
		}
	}
}