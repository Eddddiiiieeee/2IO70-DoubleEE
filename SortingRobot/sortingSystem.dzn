import interfaces.dzn;
import blockingSystem.dzn;
import beltSystem.dzn;
import ITimer.dzn;

interface ISorter {
	in void start();
	in void stop();
	out void error();
	out void returnDisk();
	
	in SortingErrors getErrorState();
	
	enum State {Running, Stopped, Error};
	enum SortingErrors {none, S000, S010, S100};
	
	behaviour {
		State state = State.Stopped;
		SortingErrors sortingErrors = SortingErrors.none;
		
		[state.Stopped] {
			on start: {state = State.Running;}
			on getErrorState: {reply(sortingErrors);}
			on stop: illegal;
		}
		[state.Running] {
			on start: illegal;
			on stop: {state = State.Stopped;}
			on getErrorState: {reply(sortingErrors);}
			on optional: {error; state = State.Error; sortingErrors = SortingErrors.S000;}
			on optional: {error; state = State.Error; sortingErrors = SortingErrors.S010;}
			on optional: {error; state = State.Error; sortingErrors = SortingErrors.S100;}
			on optional: {returnDisk;}
		}
		[state.Error] {
			on start: illegal;
			on stop: {state = State.Stopped; sortingErrors = SortingErrors.none;}
			on getErrorState: {reply(sortingErrors);}
		}
	}
}

component SortingSystem {
	provides ISorter sortingSystem;
	
	system {
		Sorter sorter;
		DiskDetector diskDetector; 
		ColorSensor colorSensor;
		Belt belt;
		Blocker blocker;
		//Timer detectorTimer;
		Timer colorTimer;
		
		sortingSystem <=> sorter.sorter;
		sorter.diskDetector <=> diskDetector.sensor;
		sorter.colorSensor <=> colorSensor.colorSensor;
		sorter.belt <=> belt.belt;
		sorter.blocker <=> blocker.blocker;
		//sorter.detectorTimer <=> detectorTimer.iTimer;
		sorter.colorTimer <=> colorTimer.iTimer;
	}
}

component Sorter {
	provides ISorter sorter;
	
	requires IBasicSensor diskDetector;	
	requires IBasicSensor colorSensor;
	requires IBelt belt;
	requires IBlocker blocker;
	//requires ITimer detectorTimer;
	requires ITimer colorTimer;
	
	
	behaviour { // NOTE: All time is in MILLISECONDS
		IBlocker.integer extendTime = $5000$; // Time it takes to PUSH disk into container
		IBlocker.integer timeoutTime = $2500$; // Timeout time for piston. If piston does not extend in timeout time, ERROR
		ITimer.integer diskScanInterval = $5000$; // Time it takes to SCAN disk
		//ITimer.integer diskTime = $500$;
		//subint diskQueue {0..5}; // I highly doubt you can fit 5 disks between the two sensors...
		//diskQueue queue = 0;
		
		ISorter.SortingErrors errorState = ISorter.SortingErrors.none;
		ISorter.State state = ISorter.State.Stopped;
		
		[state.Stopped] {
			on sorter.start(): {
				diskDetector.activate();
				belt.start();
				state = ISorter.State.Running;
			}
			on sorter.getErrorState(): {reply(errorState);}
			on sorter.stop(): illegal;
			on blocker.error(), belt.error(): {}
			//on detectorTimer.timeout(), 
			on colorTimer.timeout(): {}
			on diskDetector.triggered(), colorSensor.triggered(): {}
		}
		[state.Running] {
			on sorter.stop(): {
				diskDetector.deactivate();
				colorSensor.deactivate();
				belt.stop();
				colorTimer.cancel();
				state = ISorter.State.Stopped;
			}
			
			on diskDetector.triggered(): {
				//detectorTimer.start(diskTime);
				//queue = queue + 1;
				colorTimer.cancel();
				colorTimer.start(diskScanInterval); // TODO: Maybe add timer to reactivate the disk detector?
				colorSensor.activate();
			}
			
			//on detectorTimer.timeout(): { // Time between disk detection of first disk to the time of the start of the second disk
				//diskSensor.deactivate();
				//diskSensor.activate();
			//}
			
			on colorTimer.timeout(): {
				colorSensor.deactivate();
				sorter.returnDisk();
				diskDetector.deactivate();
				diskDetector.activate();
			}
			
			on colorSensor.triggered(): { // Sort light disk
				//[queue == 0] {
					// TODO: Consider if color sensor was activated without any disks detected...
				//}
				//[queue != 0] {
				blocker.trigger(extendTime, timeoutTime);
				diskDetector.deactivate();
				diskDetector.activate();
					//queue = queue - 1;
				//}
			}
			
			on blocker.error(): {
				IBlocker.BlockerErrors pistonState = blocker.getErrorState();
				if (pistonState == IBlocker.BlockerErrors.pistonRetracted) { // piston is not blocking sorting belt
					diskDetector.deactivate();
					colorSensor.deactivate();
					belt.stop();
					blocker.stop();
					colorTimer.cancel();
					sorter.error();
					state = ISorter.State.Error;
					errorState = ISorter.SortingErrors.S000;
				} else { // Piston is blocking the sorting belt
					diskDetector.deactivate();
					colorSensor.deactivate();
					belt.stop();
					blocker.stop();
					colorTimer.cancel();
					sorter.error();
					state = ISorter.State.Error;
					errorState = ISorter.SortingErrors.S010;
				}
			}
			
			on belt.error(): {
				diskDetector.deactivate();
				colorSensor.deactivate();
				belt.stop();
				blocker.stop();
				colorTimer.cancel();
				sorter.error();
				state = ISorter.State.Error;
				errorState = ISorter.SortingErrors.S100;
			}
			
			on sorter.getErrorState(): {reply(errorState);}
			
			on sorter.start(): illegal;
		}
		[state.Error] {
			on sorter.start(): illegal;
			on sorter.stop(): {
				state = ISorter.State.Stopped;
				errorState = ISorter.SortingErrors.none;
			}
			on sorter.getErrorState(): {reply(errorState);}
			on blocker.error(), belt.error(): {}
			//on detectorTimer.timeout(), 
			on colorTimer.timeout(): {}
			on diskDetector.triggered(), colorSensor.triggered(): {}
		}
	}
}