import interfaces.dzn;

interface IReturner {
	in void start();
	in void stop();
	out void error();
	
	enum State {Running, Stopped, ERROR};
	
	behaviour {
		State state = State.Stopped;
		
		[state.Stopped] {
			on start: {state = State.Running;}
			on stop: illegal;
		}
		[state.Running] {
			on start: illegal;
			on stop: {state = State.Stopped;}
			on optional: {error; state = State.ERROR;}
		}
		[state.ERROR] {
			on start: illegal;
			on stop: {state = State.Stopped;}
		}
	}
}

component ReturningSystem {
	provides IReturner returningSystem;
	
	system {
		Returner returner;
		DiskSensor diskSensor;
		BeltMotor beltMotor1;
		BeltMotor beltMotor2;
		
		returningSystem <=> returner.returner;
		returner.diskSensor <=> diskSensor.sensor;
		returner.beltMotor1 <=> beltMotor1.motor;
		returner.beltMotor2 <=> beltMotor2.motor;
	}
}

component Returner {
	provides IReturner returner;
	
	requires IBasicSensor diskSensor;
	requires IMotor beltMotor1;
	requires IMotor beltMotor2;
}

component DiskSensor {
	provides IBasicSensor sensor;
	
	// Manual implementation in C++
}

component BeltMotor {
	provides IMotor motor;
}