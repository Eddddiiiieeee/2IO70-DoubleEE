import interfaces.dzn;
import beltSystem.dzn;

interface IReturner {
	in void start();
	in void stop();
	out void error();
	
	enum State {Running, Stopped, ERROR};
	
	behaviour {
		State state = State.Stopped;
		
		[state.Stopped] {
			on start: {state = State.Running;}
			on stop: illegal;
		}
		[state.Running] {
			on start: illegal;
			on stop: {state = State.Stopped;}
			on optional: {error; state = State.ERROR;}
		}
		[state.ERROR] {
			on start: illegal;
			on stop: {state = State.Stopped;}
		}
	}
}

component ReturningSystem {
	provides IReturner returningSystem;
	
	system {
		Returner returner;
		DiskDetector sensor;
		Belt firstBelt;
		Belt elevatedBelt;
		
		returningSystem <=> returner.returner;
		returner.diskDetector <=> sensor.sensor;
		returner.firstBelt <=> firstBelt.belt;
		returner.elevatedBelt <=> elevatedBelt.belt;
	}
}

component Returner {
	provides IReturner returner;
	
	requires IBasicSensor diskDetector;
	requires IBelt firstBelt;
	requires IBelt elevatedBelt;
	
	behaviour {
		IReturner.State state = IReturner.State.Stopped;
		
		[state.Stopped] {
			on returner.start(): {
				diskDetector.activate();
				firstBelt.start();
				elevatedBelt.start();
				state = IReturner.State.Running;
			}
			
			on returner.stop(): illegal;
			on firstBelt.error(), elevatedBelt.error(): {
				// TODO: Consider if this needs an implementation...
			}
		}
		
		[state.Running] {
			on returner.stop(): {
				diskDetector.deactivate();
				firstBelt.stop();
				elevatedBelt.stop();
				state = IReturner.State.Stopped;
			}
			
			on diskDetector.triggered(): {
				// TODO: Consider if implementation is necessary...
			}
			
			on firstBelt.error(), elevatedBelt.error(): {
				diskDetector.deactivate();
				firstBelt.stop();
				elevatedBelt.stop();
			}
			
			on returner.start(): illegal;
		}
		
		[state.ERROR] {
			on returner.start(): illegal;
			on returner.stop(): {state = IReturner.State.Stopped;}
			on firstBelt.error(), elevatedBelt.error(): {}
		}
	}
}