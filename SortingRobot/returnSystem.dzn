import interfaces.dzn;
import beltSystem.dzn;

interface IReturner {
	in void start();
	in void stop();
	out void error();
	
	enum State {Running, Stopped, ERROR};
	
	behaviour {
		State state = State.Stopped;
		
		[state.Stopped] {
			on start: {state = State.Running;}
			on stop: illegal;
		}
		[state.Running] {
			on start: illegal;
			on stop: {state = State.Stopped;}
			on optional: {error; state = State.ERROR;}
		}
		[state.ERROR] {
			on start: illegal;
			on stop: {state = State.Stopped;}
		}
	}
}

component ReturningSystem {
	provides IReturner returningSystem;
	
	system {
		Returner returner;
		DiskDetector sensor;
		Belt belt;
		
		returningSystem <=> returner.returner;
		returner.diskDetector <=> sensor.sensor;
		returner.belt <=> belt.belt;
	}
}

component Returner {
	provides IReturner returner;
	
	requires IBasicSensor diskDetector;
	requires IBelt belt;
}